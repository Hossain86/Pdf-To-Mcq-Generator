1: Explain React's Interface Props (TypeScript) and how they are used to pass data between components, providing an example of a defined interface.
✅ Answer: React Interface Props, specifically when used with TypeScript, define the shape of data (properties) that a parent component passes down to its child component. The interface specifies the data types each property should have, ensuring type safety. For instance, `interface Props { id: number; imgsrc: string; heading: string; description: string; }` defines that a component expects an `id` as a number, `imgsrc` as a string representing an image source, `heading` as a string for the component's heading, and `description` as a string for the component's description. If a required prop is missing or of the wrong type, TypeScript will throw an error.

2: What is the purpose of the useState Hook in React, and why is it important to use the setter function (e.g., setLiked) instead of directly modifying the state variable?
✅ Answer: The `useState` Hook in React is used to manage the state (data that can change) within a functional component. It allows components to remember and update information across re-renders. It returns an array containing the current state value and a function to update that state. It's crucial to use the setter function (like `setLiked`) to update the state because React relies on this to trigger a re-render of the component, reflecting the changes in the UI. Directly modifying the state variable (e.g., `liked = true`) doesn't trigger this re-render, leading to inconsistencies between the component's internal state and its rendered output.

3: How does the useNavigate Hook from React Router function, and in what ways does it differ from using a standard `<a href="...">` tag for navigation?
✅ Answer: The `useNavigate` Hook from React Router allows you to programmatically change pages within your React application. It returns a function that you can call with a route to navigate to, such as `navigate('/game/1')`. Unlike a standard `<a href="...">` tag, which causes a full page reload, `useNavigate` leverages React Router's client-side routing to update the URL and render the new component without a full refresh, providing a smoother and faster user experience.

4: Describe what useParams does in React Router, and explain why it might be necessary to convert the returned value to a number.
✅ Answer: The `useParams` Hook in React Router allows you to extract dynamic parameters from the current URL. For example, if the URL is `/game/2`, calling `useParams()` would return an object like `{ id: "2" }`. It's often necessary to convert the returned value to a number (e.g., `Number(id)`) because `useParams()` always returns parameter values as strings, even if they represent numbers in the URL. Converting the parameter to a number allows you to use it for numerical comparisons or operations within your component's logic.

5: Explain how React Router enables navigation between different pages or views in a React application without causing a full page reload, using the `<Router>`, `<Routes>`, and `<Route>` components.
✅ Answer: React Router facilitates navigation by wrapping the entire application within a `<Router>` component, which enables routing functionality. Inside the `<Router>`, the `<Routes>` component acts as a container for `<Route>` components. Each `<Route>` defines a mapping between a specific URL path (e.g., `/game/:id`) and the component that should be rendered when that path is matched. This setup allows React Router to intercept navigation requests, update the URL, and render the appropriate component without causing a full page reload, creating a single-page application (SPA) experience.

6: Describe the purpose of storing game data in a separate file like `gameData.ts`, and how this approach contributes to cleaner and more reusable code.
✅ Answer: Storing game data in a separate file like `gameData.ts` promotes separation of concerns, making the code more organized and maintainable. By keeping the data distinct from the component logic, the `App.tsx` file becomes cleaner and easier to understand. Furthermore, the game data can be easily reused in multiple components or even across different parts of the application without duplicating the data structure.

7: Explain the purpose of the `map()` function in React when rendering lists of data, and why it's important to provide a unique `key` prop to each rendered list item.
✅ Answer: The `map()` function in React is used to iterate over an array of data and dynamically generate UI elements for each item in the array. It allows you to render lists of components without hardcoding each individual item. Providing a unique `key` prop to each rendered list item is crucial for React's performance optimization. The `key` prop helps React identify which items have changed, been added, or been removed, allowing it to efficiently update the DOM and re-render only the necessary components, leading to a smoother user experience.

8: Explain the difference between Props and State in React, highlighting who controls each and whether they can be changed. Provide example
✅ Answer: Props are data passed from a parent component to a child component. They are controlled by the parent component and are immutable from the child's perspective. They are primarily used for configuring child components with data. State, on the other hand, is a component's internal data. It is controlled by the component itself and is mutable, meaning it can be changed using the setter function returned by the `useState` Hook. State is used for managing user input, toggle states, and other data that changes within the component.
For example:
`function GameCard({ name }: { name: string }) { return <h2>{name}</h2>; } function GameList() { return <GameCard name="GTA VI" />; }`

9: What is the purpose of the useRef Hook in React, and provide a practical scenario where it would be useful?
✅ Answer: The `useRef` Hook in React is used to create a mutable reference that persists across component re-renders. It is primarily used for accessing DOM elements directly or storing values that don't trigger re-renders when updated. A practical scenario for `useRef` is focusing an input field when a component mounts. By assigning the ref to the input element and using the `current` property to access the DOM node, you can programmatically set the focus to the input field.

10: Briefly describe how CSS Flexbox works and explain the purpose of `justify-content` and `align-items` properties within a Flexbox container.
✅ Answer: CSS Flexbox is a layout model that makes it easier to align and distribute space among items in a container. By setting `display: flex;` on a container, you enable Flexbox for its direct children (flex items). The `justify-content` property controls the horizontal alignment of flex items within the container. Common values include `center`, `flex-start`, `flex-end`, `space-between`, and `space-around`. The `align-items` property, on the other hand, controls the vertical alignment of flex items. Common values include `center`, `flex-start`, `flex-end`, and `stretch`. Flexbox is designed to create responsive and dynamic layouts.
