Motivation Blog And Bootstrap 
 
Alright, let's break it all down step by step in a beginner-friendly way!   
 
1Ô∏è‚É£ Understanding App.tsx 
This file is the main entry point of your app. It defines how different pages (routes) of your app work, manages 
state, and filters blog data. 
 
üõ§ React Router (Routing) 
  What is Routing? Routing in React lets you navigate between different pages (views) in a single-page 
application (SPA) without refreshing the page. 
  How is Routing Used in App.tsx? You're using React Router (react-router-dom) to manage navigation. 
The key components here are: 
‚Ä¢ 
<BrowserRouter> (or Router): The main wrapper that enables routing. 
‚Ä¢ 
<Routes>: Groups all the different pages (routes). 
‚Ä¢ 
<Route>: Defines each page and what component should be displayed for that page. 
  Example from App.tsx: 
<Route path="/" element={<LandingPage />} /> 
  This means: 
‚Ä¢ 
When the user visits / (homepage), they will see the LandingPage component. 
  More Routes in Your App: 
<Route path="/blogs" element={<Block articles={filteredArticles} />} /> 

<Route path="/blog/:id" element={<BlogDetails blog={blogData} />} /> 
‚Ä¢ 
/blogs ‚Üí Shows the Block component with a filtered list of blogs. 
‚Ä¢ 
/blog/:id ‚Üí Shows details of a specific blog (dynamic routing using :id). 
 
2Ô∏è‚É£ useState Hook: Managing State 
  What is State? State in React is like a memory for a component‚Äîit stores information that changes over 
time (like selected category, open/close menus, user input, etc.). 
  Example from App.tsx: 
const [selectedCategory, setSelectedCategory] = useState<string>(""); 
This means: 
‚Ä¢ 
selectedCategory is a state variable that holds the currently selected blog category. 
‚Ä¢ 
setSelectedCategory is a function used to update selectedCategory. 
‚Ä¢ 
<string> ensures that selectedCategory can only store text (string values). 
  Using useState<boolean> in NavbarPage.tsx: 
const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false); 
‚Ä¢ 
isMenuOpen stores true (menu is open) or false (menu is closed). 
‚Ä¢ 
setIsMenuOpen updates the menu state. 
‚Ä¢ 
<boolean> ensures isMenuOpen can only be true or false. 
 
3Ô∏è‚É£ How Clicking a Button Changes isMenuOpen 
In NavbarPage.tsx, when the menu icon (‚ò∞) is clicked, this function runs: 
onClick={() => setIsMenuOpen(!isMenuOpen)} 
  How it works: 
‚Ä¢ 
setIsMenuOpen(!isMenuOpen) toggles the value of isMenuOpen:  
o If isMenuOpen was false, it changes to true (menu opens). 
o If isMenuOpen was true, it changes to false (menu closes). 
 
4Ô∏è‚É£ Passing Data Between Components 
  How setCategory is Passed from App.tsx to NavbarPage.tsx In App.tsx, you pass setSelectedCategory to 
NavbarPage: 
<NavbarPage setCategory={setSelectedCategory} /> 
In NavbarPage.tsx, you receive it as a prop: 
interface NavbarPageProps { 

  setCategory: (category: string) => void; 
} 
const NavbarPage: React.FC<NavbarPageProps> = ({ setCategory }) => { 
Now, when a user clicks a category in the navbar, setCategory updates selectedCategory in App.tsx: 
<Link to="/blogs" onClick={() => setCategory("Technology")}> 
  Technology 
</Link> 
So, when "Technology" is clicked, selectedCategory becomes "Technology", and the blog list updates. 
 
5Ô∏è‚É£ Filtering Blog Data by Category 
  How Filtering Works in App.tsx: 
const filteredArticles = selectedCategory 
  ? blogData.filter((article) => article.category === selectedCategory) 
  : blogData; 
  How It Works: 
‚Ä¢ 
If selectedCategory is empty, show all blogs. 
‚Ä¢ 
Otherwise, use .filter() to keep only blogs that match the selected category. 
 
6Ô∏è‚É£ Changing Filtering Logic 
  If You Want to Filter by Author Instead of Category Modify the onClick handlers in NavbarPage.tsx: 
<Link to="/blogs" onClick={() => setCategory("John Doe")}> 
  John's Blogs 
</Link> 
Then, update filteredArticles logic in App.tsx: 
const filteredArticles = selectedCategory 
  ? blogData.filter((article) => article.author === selectedCategory) 
  : blogData; 
Now, clicking "John's Blogs" will show only the blogs written by "John Doe." 
 
7Ô∏è‚É£ What is React.FC? 
  React.FC stands for "React Functional Component". 
It's a TypeScript feature that ensures a component: 
‚Ä¢ 
Is a function. 

‚Ä¢ 
Accepts props (properties). 
‚Ä¢ 
Returns JSX. 
  Example: 
const NavbarPage: React.FC<NavbarPageProps> = ({ setCategory }) => { 
This means: 
‚Ä¢ 
NavbarPage is a React Functional Component. 
‚Ä¢ 
It accepts NavbarPageProps (which includes setCategory). 
‚Ä¢ 
Without React.FC, you'd manually define the props:  
‚Ä¢ 
const NavbarPage = ({ setCategory }: NavbarPageProps) => { 
Both ways work, but React.FC provides better type safety. 
 
8Ô∏è‚É£ Recap: What You Learned 
  React Router Basics: Defines routes (/, /blogs, /blog/:id). 
  useState Hook: Manages component state (e.g., selectedCategory, isMenuOpen). 
  Passing Data (Props): setCategory updates selectedCategory. 
  Filtering Data: Uses .filter() to show blogs of a selected category. 
  React.FC: TypeScript type for function components. 
 
This is a solid foundation! If you have any questions, let me know.    
Alright, let‚Äôs break it all down step by step in a beginner-friendly way!   
 
1Ô∏è‚É£ Understanding LandingPage.tsx 
This file defines the landing page that users see when they first open your website. 
  Key Features of LandingPage.tsx 
‚Ä¢ 
Uses useNavigate() to handle navigation. 
‚Ä¢ 
Displays motivational text and an image. 
‚Ä¢ 
Has a "Get Started" button that navigates to the blogs page (/blogs). 
 
üõ§ Routing with useNavigate() 
  What is useNavigate? 
‚Ä¢ 
It is a React Router hook that lets you navigate programmatically without using a <Link>. 
‚Ä¢ 
It replaces useHistory() (which was used in older React versions). 
  Example from LandingPage.tsx: 
const navigate = useNavigate(); 

Now, navigate is a function that can redirect users to different pages. 
 
  The "Get Started" Button 
<button className={styles.ctaButton} onClick={() => navigate("/blogs")}> 
  Get Started 
</button> 
  How it works: 
‚Ä¢ 
When the button is clicked, navigate("/blogs") runs. 
‚Ä¢ 
This redirects the user to /blogs, where all blog posts are displayed. 
 
2Ô∏è‚É£ Understanding Block.tsx 
This component displays a list of blog posts (articles). Each blog post has:   An image 
  A title (clickable for more details) 
  A summary 
  A category, date, and author 
  A "Show More" button (navigates to the full blog) 
  A Like button (  toggles between liked and unliked) 
 
  articles: ArticleData[] - What Does It Mean? 
  What is ArticleData? It‚Äôs an interface that defines the structure of a blog article. 
interface ArticleData { 
  id: number; 
  heading: string; 
  imgsrc: string; 
  details: string; 
  category: string; 
  date_created: string; 
  author: string; 
} 
  What is articles: ArticleData[]? 
‚Ä¢ 
This means articles is an array of ArticleData objects. 
‚Ä¢ 
Each article in the array has:  
o id ‚Üí Unique number 
o heading ‚Üí Blog title 

o imgsrc ‚Üí Image URL 
o details ‚Üí Blog content 
o category ‚Üí Blog category 
o date_created ‚Üí Publish date 
o author ‚Üí Writer's name 
  Example of articles: 
const articles = [ 
  {  
    id: 1,  
    heading: "How to Stay Motivated",  
    imgsrc: "image1.jpg",  
    details: "Some long text about motivation...", 
    category: "Study Motivation",  
    date_created: "2025-02-20",  
    author: "John Doe" 
  }, 
  {  
    id: 2,  
    heading: "Tech Innovations",  
    imgsrc: "image2.jpg",  
    details: "Some long text about technology...", 
    category: "Technology",  
    date_created: "2025-02-21",  
    author: "Jane Smith" 
  } 
]; 
‚Ä¢ 
These blog posts are passed as props into Block.tsx. 
 
3Ô∏è‚É£ useState - Managing the "Like" Feature 
This state stores which articles are liked. 
  Code: 
const [likedArticles, setLikedArticles] = useState<{ [key: number]: boolean }>(() => { 
  const storedLikes: { [key: number]: boolean } = {}; 

  articles.forEach((article) => { 
    storedLikes[article.id] = localStorage.getItem(`liked-${article.id}`) === "true"; 
  }); 
  return storedLikes; 
}); 
  Breaking it down: 
1. useState<{ [key: number]: boolean }>() 
o likedArticles is a state object. 
o { [key: number]: boolean } ‚Üí A dictionary where:  
‚ñ™ 
key (article ID) ‚Üí Stores true (liked) or false (not liked). 
2. Why use an arrow function (() => {...})? 
o This initializes the state only once when the component loads. 
3. How does it check for previously liked articles? 
o localStorage.getItem(\liked-${article.id}`) === "true"` 
o If an article was liked before, it retrieves the previous like state. 
  Example Output of likedArticles: 
{ 1: true, 2: false, 3: true } 
‚Ä¢ 
Blog with id: 1 and id: 3 are liked. 
‚Ä¢ 
Blog with id: 2 is not liked. 
 
4Ô∏è‚É£ toggleLike Function 
This toggles the like state when a user clicks the   icon. 
  Code: 
const toggleLike = (id: number) => { 
  setLikedArticles((prev) => { 
    const newLiked = { ...prev, [id]: !prev[id] }; 
    localStorage.setItem(`liked-${id}`, newLiked[id].toString()); 
    return newLiked; 
  }); 
}; 
  How it works: 
1. setLikedArticles((prev) => {...}) ‚Üí Updates the state. 
2. { ...prev, [id]: !prev[id] } ‚Üí  

o Copies previous state (prev). 
o Changes id's value to its opposite (true ‚Üí false, false ‚Üí true). 
3. localStorage.setItem(...) ‚Üí Saves the new like state. 
  Example Usage: 
‚Ä¢ 
If article 1Ô∏è was not liked, clicking   will:  
‚Ä¢ 
{ 1: true } 
‚Ä¢ 
Clicking   again will unlike it:  
‚Ä¢ 
{ 1: false } 
 
5Ô∏è‚É£ Mapping Over articles 
  Code: 
{articles.map((article) => ( 
  <div key={article.id} className="block-container"> 
    <h2 onClick={() => navigate(`/blog/${article.id}`)}>{article.heading}</h2> 
    <p>{article.details.substring(0, 200) + "..."}</p> 
    <button onClick={() => navigate(`/blog/${article.id}`)}>Show More</button> 
    <span onClick={() => toggleLike(article.id)} style={{ cursor: "pointer" }}> 
      {likedArticles[article.id] ? <AiFillHeart color="red" /> : <AiOutlineHeart />} 
    </span> 
  </div> 
))} 
  What happens here? 
1. .map((article) => {...}) 
o Loops through articles. 
o Displays each blog post. 
2. <h2 onClick={() => navigate(/blog/${article.id})}> 
o Clicking the title takes the user to /blog/:id. 
3. Truncating text 
4. {article.details.substring(0, 200) + "..."} 
o Shows only the first 2Ô∏è00 characters with "...". 
5. Like Button ( ) 
6. <span onClick={() => toggleLike(article.id)}> 
7.   {likedArticles[article.id] ? <AiFillHeart color="red" /> : <AiOutlineHeart />} 

8. </span> 
o If the article is liked, it shows a red heart. 
o If not liked, it shows an empty heart. 
 
Final Recap 
  LandingPage.tsx ‚Üí Handles navigation using useNavigate(). 
  Block.tsx ‚Üí Displays a list of articles, shows summaries, and allows likes. 
  State (useState) ‚Üí Manages which articles are liked. 
  LocalStorage ‚Üí Saves likes even after a page refresh. 
  toggleLike Function ‚Üí Updates the like status dynamically. 
  Mapping (.map()) ‚Üí Iterates over the blog list and displays them. 
 
  That‚Äôs it! You now understand how the landing page, blog display, and liking system work. Let me know if 
you have any questions!    
Alright, let‚Äôs break down BlogDetails.tsx step by step so you understand how it works!   
 
1Ô∏è‚É£ Overview: What Does BlogDetails.tsx Do? 
This component displays the details of a single blog post when a user clicks on a blog from the Block.tsx 
component. 
  Key Features: 
  Uses useParams() to get the blog ID from the URL 
  Finds the blog from the list using the ID 
  Displays full blog content (image, title, details, category, date, author) 
  Includes a Back button to return to the previous page 
  Has a rating system (1-5 stars) using useState 
  Scrolls to the top when opened using useEffect 
 
2Ô∏è‚É£ Getting the Blog ID from the URL 
  Code: 
const { id } = useParams(); 
  How it works: 
‚Ä¢ 
useParams() is a React Router hook that extracts route parameters. 
‚Ä¢ 
Since we defined our route as /blog/:id in App.tsx, this id comes from the URL. 
‚Ä¢ 
The id is a string, so we convert it to a number when needed. 
  Example: 
If the user visits /blog/2Ô∏è, then: 

const { id } = useParams();  // id = "2" 
 
3Ô∏è‚É£ Finding the Blog by ID 
  Code: 
const game = blog.find((g) => g.id === Number(id)); 
  How it works: 
‚Ä¢ 
blog is an array of all blog posts (passed as a prop). 
‚Ä¢ 
.find((g) => g.id === Number(id)) searches for the blog that matches the ID. 
‚Ä¢ 
Number(id) converts the string id to a number. 
  Example: If id = "2", then: 
const game = blog.find((g) => g.id === 2); 
‚Ä¢ 
If a matching blog is found ‚Üí game holds that blog. 
‚Ä¢ 
If no blog is found, game will be undefined. 
 
4Ô∏è‚É£ Handling "Blog Not Found" 
  Code: 
if (!game) return <h2>Blog not found!</h2>; 
  What happens here? 
‚Ä¢ 
If no matching blog is found, we stop rendering the page and show "Blog not found!". 
  Example: 
‚Ä¢ 
If a user tries to visit /blog/999 (and no blog has id: 999), they will see:  
‚Ä¢ 
Blog not found! 
 
5Ô∏è‚É£ Navigating Back to the Previous Page 
  Code: 
<button onClick={() => navigate(-1)} className="back-button"> 
  ‚¨Ö Back 
</button> 
  How it works: 
‚Ä¢ 
useNavigate() is a React Router hook for navigation. 
‚Ä¢ 
navigate(-1) takes the user back to the previous page (just like a browser back button). 
 

6Ô∏è‚É£ Displaying the Blog Content 
  Code: 
<img src={game.imgsrc} alt={game.heading} className="blog-img" /> 
<h2 className="blog-header">{game.heading}</h2> 
<p className="blog-details">{game.details}</p> 
  How it works: 
‚Ä¢ 
Displays blog image (game.imgsrc). 
‚Ä¢ 
Shows the blog title (game.heading). 
‚Ä¢ 
Displays the full blog content (game.details). 
  Example Output: 
üñº [Blog Image] 
  "How to Stay Motivated" 
  "Here is a long text about motivation and success..." 
 
7Ô∏è‚É£ Displaying Extra Blog Info 
  Code: 
<div className="extended-info"> 
  <p><strong>Category:</strong> {game.category}</p> 
  <p><strong>Date:</strong> {game.date_created}</p> 
  <p><strong>Author:</strong> {game.author}</p> 
</div> 
  What it does: 
‚Ä¢ 
Displays the blog category, publish date, and author. 
  Example Output: 
Category: Study Motivation   
Date: 2025-02-20   
Author: John Doe 
 
8Ô∏è‚É£ Implementing the Rating System 
  Step 1Ô∏è: Create State for Rating 
  Code: 
const [rating, setRating] = useState<number>(0); 

  What happens here? 
‚Ä¢ 
rating stores the number of stars selected (1 to 5). 
‚Ä¢ 
Initially, rating = 0 (no rating selected). 
 
  Step 2Ô∏è: Display Stars 
  Code: 
<div className="rating-section"> 
  <h3>Rate this Blog:</h3> 
  {[1, 2, 3, 4, 5].map((star) => ( 
    <span 
      key={star} 
      onClick={() => setRating(star)} 
      style={{ cursor: "pointer", fontSize: "1.5rem" }} 
    > 
      {rating >= star ? <FaStar color="gold" /> : <FaRegStar color="gold" />} 
    </span> 
  ))} 
  {rating > 0 && <p>Your rating: {rating} / 5</p>} 
</div> 
  How it works: 
‚Ä¢ 
[1, 2, 3, 4, 5] ‚Üí Creates 5Ô∏è stars using .map(). 
‚Ä¢ 
Clicking on a star sets the rating (setRating(star)). 
‚Ä¢ 
If rating >= star ‚Üí Display a filled gold star ( ). 
‚Ä¢ 
Otherwise, show an empty star (‚òÜ). 
  Example: 
Clicked Stars 
Displayed Stars 
 ‚òÜ‚òÜ‚òÜ‚òÜ (1) 
 ‚òÜ‚òÜ‚òÜ‚òÜ 
   ‚òÜ‚òÜ (3) 
   ‚òÜ‚òÜ 
      (5)       
 
9‚É£ Automatically Scroll to the Top on Load 
  Code: 

useEffect(() => { 
  window.scrollTo(0, 0); 
}, []); 
  Why do this? 
‚Ä¢ 
When a user navigates to a new blog, React doesn't reset the scroll position. 
‚Ä¢ 
window.scrollTo(0, 0); forces the page to start at the top. 
‚Ä¢ 
The useEffect(() => {...}, []) ensures this runs only once when the component mounts. 
 
  Full Code Flow Summary 
1. Extracts id from URL using useParams(). 
2. Finds the blog in the list using .find(). 
3. Handles missing blogs with "Blog not found!". 
4. Shows a back button (navigate(-1)). 
5. Displays full blog content (image, title, details). 
6. Shows extra info (category, date, author). 
7. Implements a 5Ô∏è-star rating system with state. 
8. Automatically scrolls to the top when opened. 
 
  Final Recap 
Feature 
Code Used 
Get Blog ID from URL useParams() 
Find Blog by ID 
.find() 
Navigate Back 
useNavigate() 
Display Blog Content {game.heading}, {game.details} 
Show Extra Info 
{game.category}, {game.date_created}, {game.author} 
Rating System 
useState(), .map(), setRating() 
Scroll to Top 
useEffect() 
  Now you fully understand BlogDetails.tsx! Let me know if you have any questions!   
App.tsx:: 
import { useState } from "react"; 
import { BrowserRouter as Router, Routes, Route } 
from "react-router-dom"; 
import blogData from 
"./assets/components/BlogData"; 
import LandingPage from 
"./assets/components/LandingPage/LandingPage"; 

import Block from 
"./assets/components/fastpractice/Block"; 
import NavbarPage from 
"./assets/components/Navbar/NavbarPage"; 
import BlogDetails from 
"./assets/components/fastpractice/BlogDetails"; 
import "./App.css"; 
function App() { 
  const [selectedCategory, setSelectedCategory] = 
useState<string>(""); 
  //   Filter blogData based on selected category 
  const filteredArticles = selectedCategory 
    ? blogData.filter((article) => article.category === 
selectedCategory) 
    : blogData; 
  return ( 
    <Router> 
      <Routes> 
        {/* Landing Page */} 
        <Route 
          path="/" 
          element={ 
            <div className="app-container"> 
              <NavbarPage 
setCategory={setSelectedCategory} /> 
              <LandingPage /> 
            </div> 
          } 
        /> 
        {/* Blogs Page with Filtering */} 
        <Route 
          path="/blogs" 
          element={ 
            <div className="app-container"> 
              <NavbarPage 
setCategory={setSelectedCategory} /> 
              <Block articles={filteredArticles} /> 
            </div> 
          } 
        /> 
        {/* Blog Details Page */} 
        <Route 
          path="/blog/:id" 
          element={ 
            <div className="app-container"> 
              <NavbarPage 
setCategory={setSelectedCategory} /> 
              <BlogDetails blog={blogData} /> 
            </div> 
          } 
        /> 
      </Routes> 
    </Router> 
  ); 
} 
export default App; 
NavbarPage.tsx:: 
import React, { useRef, useState } from "react"; 
import { Link } from "react-router-dom"; 
import styles from "./NavbarPage.module.css"; 
interface NavbarPageProps { 
  setCategory: (category: string) => void; 
} 
const NavbarPage: React.FC<NavbarPageProps> = 
({ setCategory }) => { 
  const [isMenuOpen, setIsMenuOpen] = 
useState<boolean>(false); 
  const menuRef = 
useRef<HTMLDivElement>(null); 
  return ( 

    <nav className={styles.navbar} 
ref={menuRef}> 
      <div className={styles.menuIcon} 
onClick={() => setIsMenuOpen(!isMenuOpen)}> 
        ‚ò∞ 
      </div> 
      <ul className={`${styles.navLinks} 
${isMenuOpen ? styles.showMenu : ""}`}> 
        <li> 
          <Link to="/" onClick={() => { 
setCategory(""); setIsMenuOpen(false); }}> 
              Blog   
          </Link> 
        </li> 
        <li> 
          <Link to="/blogs" onClick={() => { 
setCategory("Career & Productivity Motivation"); 
setIsMenuOpen(false); }}> 
            Career & Productivity 
          </Link> 
        </li> 
        <li> 
          <Link to="/blogs" onClick={() => { 
setCategory("Technology"); setIsMenuOpen(false); 
}}> 
            Technology 
          </Link> 
        </li> 
        <li> 
          <Link to="/blogs" onClick={() => { 
setCategory("Study Motivation"); 
setIsMenuOpen(false); }}> 
            Study Motivation 
          </Link> 
        </li> 
        <li> 
          <Link to="/blogs" onClick={() => { 
setCategory("Mental Health & Emotional 
Motivation"); setIsMenuOpen(false); }}> 
            Life 
          </Link> 
        </li> 
      </ul> 
    </nav> 
  ); 
}; 
export default NavbarPage; 
 
BlogData.ts:: 
const blogData=[ 
  { 
    "id": 1, 
    "heading": "Creative Coding: Turning Ideas into 
Reality", 
    "imgsrc": "https://images.unsplash.com/photo-
1515879218367-8466d910aaa4", 
    "details": "Coding is not just about solving 
problems; it's about creating something new. This 
blog introduces creative coding projects that 
combine art, ‚Ä¶... ", 
    "category": "Technology", 
    "date_created": "2023-11-20", 
    "author": "Emily Davis" 
  }, 
‚Ä¶‚Ä¶] 
 
LandingPage.tsx:: 
import styles from "./LandingPage.module.css"; 
import {  useNavigate } from "react-router-dom"; 
const LandingPage: React.FC = () => { 
  const navigate = useNavigate(); 
   

   
  return ( 
    <div 
className={styles.LandingPageContainer}> 
      {/* Landing Page Section */} 
      <div className={styles.landingSection}> 
        <div className={styles.content}> 
          <h1 className={styles.gameheader}> 
            Unleash Your Potential: The Power of 
Relentless Motivation   
          </h1> 
          <p className={styles.gamedetails}> 
            Are You Ready to Break Barriers and 
Achieve More? We all have 
            Dreams‚Ä¶.. 
          </p> 
          <button 
            className={styles.ctaButton} 
            onClick={() => navigate("/blogs")} 
          > 
            Get Started 
          </button> 
        </div> 
        <div className={styles.imageContainer}> 
          <img 
/*https://rawg.io/assets/images/cover.117cc320ec28
00b9b12092ca23d6e86d.png */ 
            src="https://www.univariety.com/blog/wp-
content/uploads/2014/08/motivational-goals.jpg" 
            alt="Motivation Preview" 
            className={styles.heroImage} 
          /> 
        </div> 
      </div> 
    </div> 
  ); 
}; 
export default LandingPage; 
 
Block.tsx:: 
import { useState} from "react"; 
import { useNavigate } from "react-router-dom"; // 
Import useNavigate 
import "./Block.css"; 
import { AiFillHeart, AiOutlineHeart } from "react-
icons/ai"; 
interface ArticleData { 
  id: number; 
  heading: string; 
  imgsrc: string; 
  details: string; 
  category: string; 
  date_created: string; 
  author: string; 
} 
// Define props interface 
interface Props { 
  articles: ArticleData[]; 
} 
function Block({ articles }: Props) { 
  const navigate = useNavigate(); 
  // Manage likes in a state object 
  const [likedArticles, setLikedArticles] = 
useState<{ [key: number]: boolean }>(() => { 
    const storedLikes: { [key: number]: boolean } = 
{}; 
    articles.forEach((article) => { 
      storedLikes[article.id] = 
localStorage.getItem(`liked-${article.id}`) === 
"true"; 
    }); 
    return storedLikes; 

  }); 
  const toggleLike = (id: number) => { 
    setLikedArticles((prev) => { 
      const newLiked = { ...prev, [id]: !prev[id] }; 
      localStorage.setItem(`liked-${id}`, 
newLiked[id].toString()); 
      return newLiked; 
    }); 
  }; 
  return ( 
    <div className="block"> 
      {articles.map((article) => ( 
        <div key={article.id} className="block-
container"> 
          <div className="block-image"> 
            <img src={article.imgsrc} 
alt={article.heading} className="block-img" /> 
          </div> 
          <div className="block-texts"> 
            <h2 className="block-header" onClick={() 
=> 
navigate(`/blog/${article.id}`)}>{article.heading}</
h2> 
            <p className="block-
details">{article.details.substring(0, 200) + 
"..."}</p> 
            <p><strong>Category:</strong> 
{article.category}</p> 
            <p><strong>Date:</strong> 
{article.date_created}</p> 
            <p><strong>Author:</strong> 
{article.author}</p> 
            {/* Navigate to Blog Details page */} 
            <button className="ctaButton" 
onClick={() => navigate(`/blog/${article.id}`)}> 
              Show More 
            </button> 
            <div className="block-lower"> 
              <span onClick={() => 
toggleLike(article.id)} style={{ cursor: "pointer" 
}}> 
                {likedArticles[article.id] ? <AiFillHeart 
color="red" size={22} /> : <AiOutlineHeart 
size={22} />} 
              </span> 
            </div> 
          </div> 
        </div> 
      ))} 
    </div> 
  ); 
} 
export default Block; 
 
BlogDetails.tsx:: 
import { useParams, useNavigate } from "react-
router-dom"; 
import { useEffect, useState } from "react"; 
import { FaStar, FaRegStar } from "react-icons/fa"; 
import "./BlogDetails.css"; // Optional: create this 
file for styling 
interface Blog { 
  id: number; 
  heading: string; 
  imgsrc: string; 
  details: string; 
  category: string; 
  date_created: string; 
  author: string; 
} 
interface Props { 
  blog: Blog[]; 
} 
function BlogDetails({ blog }: Props) { 

  const { id } = useParams(); 
  const navigate = useNavigate(); 
  // Find the selected game using the id from the 
URL 
  const game = blog.find((g) => g.id === 
Number(id)); 
  // Rating state (0 to 5) 
  const [rating, setRating] = useState<number>(0); 
  //   Scroll to top when the component mounts 
  useEffect(() => { 
    window.scrollTo(0, 0); 
  }, []); 
   
  if (!game) return <h2>Blog not found!</h2>; 
  return ( 
    <div className="blog-container"> 
      <button onClick={() => navigate(-1)} 
className="back-button"> 
        ‚¨Ö Back 
      </button> 
      <img src={game.imgsrc} alt={game.heading} 
className="blog-img" /> 
      <h2 className="blog-
header">{game.heading}</h2> 
      <p className="blog-
details">{game.details}</p> 
      {/* Extended Blog Information */} 
      <div className="extended-info"> 
        <p> 
          <strong>Category:</strong> 
{game.category} 
        </p> 
        <p> 
          <strong>Date:</strong> {game.date_created} 
        </p> 
        <p> 
          <strong>Author:</strong> {game.author} 
        </p> 
      </div> 
      {/* Rating System */} 
      <div className="rating-section"> 
        <h3>Rate this Blog:</h3> 
        {[1, 2, 3, 4, 5].map((star) => ( 
          <span 
            key={star} 
            onClick={() => setRating(star)} 
            style={{ cursor: "pointer", fontSize: 
"1.5rem" }} 
          > 
            {rating >= star ? ( 
              <FaStar color="gold" /> 
            ) : ( 
              <FaRegStar color="gold" /> 
            )} 
          </span> 
        ))} 
        {rating > 0 && <p>Your rating: {rating} / 
5</p>} 
      </div> 
    </div> 
  ); 
} 
export default BlogDetails; 
Bootstrap 5 
  Understanding Key Bootstrap Properties with Examples 

Bootstrap is a powerful framework for building responsive and mobile-first websites. Below, I‚Äôll explain 
important Bootstrap concepts with examples and descriptions of how they look on a webpage. 
 
1Ô∏è‚É£ Breakpoints (Screen Size Adaptability) 
  What it is: 
‚Ä¢ 
Defines screen size ranges where CSS styles apply. 
‚Ä¢ 
Used to make websites responsive. 
‚Ä¢ 
Bootstrap has these default breakpoints: 
Breakpoint Class Prefix Applies When Screen Width is: 
Extra Small None 
<576px (Default for all devices) 
Small 
sm 
‚â•576px 
Medium 
md 
‚â•768px 
Large 
lg 
‚â•992px 
Extra Large xl 
‚â•1200px 
XXL 
xxl 
‚â•1400px 
  Example: Responsive Columns 
<div class="row"> 
  <div class="col-sm-12 col-md-6 col-lg-4 bg-primary text-white">Responsive Column</div> 
</div> 
  How it behaves: 
‚Ä¢ 
On small screens (<576px) ‚Üí Takes full width (col-sm-12). 
‚Ä¢ 
On medium screens (‚â•768px) ‚Üí Takes 5Ô∏è0% width (col-md-6). 
‚Ä¢ 
On large screens (‚â•992px) ‚Üí Takes 3Ô∏è3Ô∏è% width (col-lg-4). 
  On Website: 
‚Ä¢ 
On mobile, the column stretches full width. 
‚Ä¢ 
On tablet, it takes half the width. 
‚Ä¢ 
On desktop, it takes one-third of the width. 
 
2Ô∏è‚É£ Containers (Website Layout Structure) 
  What it is: 
‚Ä¢ 
Used to wrap website content and provide spacing. 
‚Ä¢ 
Three types:  

o .container ‚Üí Fixed width. 
o .container-fluid ‚Üí Full width. 
o .container-{breakpoint} ‚Üí Responsive containers. 
  Example: 
<div class="container bg-light p-3"> 
  <h2>Fixed Width Container</h2> 
  <p>This container is centered and has a max width.</p> 
</div> 
<div class="container-fluid bg-dark text-white p-3"> 
  <h2>Full-Width Container</h2> 
  <p>This container stretches across the entire screen.</p> 
</div> 
  On Website: 
‚Ä¢ 
.container stays centered with some margins on both sides. 
‚Ä¢ 
.container-fluid stretches 1Ô∏è00% of the screen width. 
 
3Ô∏è‚É£ Grid System (Row & Column Layout) 
  What it is: 
‚Ä¢ 
Bootstrap‚Äôs layout system is based on a 1Ô∏è2Ô∏è-column grid. 
‚Ä¢ 
Rows (.row) contain columns (.col-). 
‚Ä¢ 
Uses breakpoints for responsiveness. 
  Example: Three Equal Columns 
<div class="container"> 
  <div class="row"> 
    <div class="col-md-4 bg-primary text-white p-3">Column 1</div> 
    <div class="col-md-4 bg-secondary text-white p-3">Column 2</div> 
    <div class="col-md-4 bg-success text-white p-3">Column 3</div> 
  </div> 
</div> 
  On Website: 
‚Ä¢ 
On small screens ‚Üí Columns stack vertically. 
‚Ä¢ 
On medium screens (‚â•7Ô∏è6Ô∏è8Ô∏èpx) ‚Üí Three columns appear side by side. 
 

4Ô∏è‚É£ Column (Width & Alignment) 
  What it is: 
‚Ä¢ 
Columns define content placement inside Bootstrap's grid. 
‚Ä¢ 
col- classes control column width in a 1Ô∏è2Ô∏è-column layout. 
  Example: Mixed Column Sizes 
<div class="row"> 
  <div class="col-3 bg-danger text-white p-3">25% Width</div> 
  <div class="col-6 bg-warning text-dark p-3">50% Width</div> 
  <div class="col-3 bg-info text-white p-3">25% Width</div> 
</div> 
  On Website: 
‚Ä¢ 
First column takes 2Ô∏è5Ô∏è% width (col-3). 
‚Ä¢ 
Second column takes 5Ô∏è0% width (col-6). 
‚Ä¢ 
Third column takes 2Ô∏è5Ô∏è% width (col-3). 
 
5Ô∏è‚É£ Gutter (Spacing Between Columns) 
  What it is: 
‚Ä¢ 
Adds spacing between columns. 
‚Ä¢ 
Controlled using .g-* classes. 
  Example: 
<div class="row g-3"> 
  <div class="col-md-4 bg-primary text-white p-3">Column 1</div> 
  <div class="col-md-4 bg-secondary text-white p-3">Column 2</div> 
  <div class="col-md-4 bg-success text-white p-3">Column 3</div> 
</div> 
  .g-3 ‚Üí Adds gap between columns. 
  On Website: 
‚Ä¢ 
Without g-3Ô∏è ‚Üí Columns touch each other. 
‚Ä¢ 
With g-3Ô∏è ‚Üí Columns have a gap for better spacing. 
 
6Ô∏è‚É£ Utilities (Prebuilt Helper Classes) 
  What it is: 

‚Ä¢ 
Predefined utility classes for padding, margin, text, background, and display. 
  Example: 
<div class="bg-dark text-white p-3 m-3 text-center"> 
  This has padding, margin, and centered text. 
</div> 
  Common Utility Classes: 
‚Ä¢ 
.p-3 ‚Üí Padding 
‚Ä¢ 
.m-3 ‚Üí Margin 
‚Ä¢ 
.text-center ‚Üí Centers text 
‚Ä¢ 
.bg-dark ‚Üí Dark background 
‚Ä¢ 
.text-white ‚Üí White text 
  On Website: 
‚Ä¢ 
The box has a background, padding, and is centered inside the page. 
 
7Ô∏è‚É£ Z-index (Stacking Order) 
  What it is: 
‚Ä¢ 
Controls element layering (which elements appear on top of others). 
‚Ä¢ 
Works with positioned elements (absolute, fixed, etc.). 
  Example: 
<div class="position-relative"> 
  <div class="position-absolute top-0 start-0 bg-danger text-white p-2 z-1"> 
    Lower Layer (z-index: 1) 
  </div> 
  <div class="position-absolute top-0 start-50 bg-success text-white p-2 z-3"> 
    Higher Layer (z-index: 3) 
  </div> 
</div> 
  How it works: 
‚Ä¢ 
The green box (z-3Ô∏è) appears on top of the red box (z-1). 
  On Website: 
‚Ä¢ 
Elements with higher z-index appear above lower z-index elements. 
 
  Final Summary 

Concept 
Purpose 
Breakpoints Make layouts responsive for different screen sizes 
Containers Wrap and center content 
Grid System Create structured layouts using rows & columns 
Column 
Define widths inside the grid 
Gutter 
Control spacing between columns 
Utilities 
Quick styling for padding, margin, background, etc. 
Z-index 
Control layering of elements 
  Now you know essential Bootstrap properties! Let me know if you need more detailed explanations!   
  Bootstrap Properties: Reboot, Typography, Images, Tables, Figures 
Bootstrap provides predefined styles to make designing webpages faster and easier. Below, I'll explain 
Reboot, Typography, Images, Tables, and Figures with examples and how they appear on a website. 
 
1Ô∏è‚É£ Reboot (CSS Reset & Enhancements) 
  What it is: 
‚Ä¢ 
Bootstrap‚Äôs Reboot.css is a modern CSS reset based on Normalize.css. 
‚Ä¢ 
It removes browser inconsistencies and applies consistent styles across elements. 
  Key Features: 
  Removes margins from <body>, <h1>, <p>, etc. 
  Uses box-sizing: border-box (prevents unwanted spacing issues). 
  Better text rendering (ensures readable text). 
  Example: Without Reboot vs. With Reboot 
<h1>Without Reboot</h1> 
<p>This text may look different across browsers.</p> 
<h1 class="text-primary">With Reboot</h1> 
<p>This text looks consistent across all browsers.</p> 
  On Website: 
‚Ä¢ 
Without Reboot: Different browsers display text inconsistent margins & sizes. 
‚Ä¢ 
With Reboot: Uniform styles across Chrome, Firefox, Edge, etc. 
 
2Ô∏è‚É£ Typography (Text Styling & Formatting) 
  What it is: 
‚Ä¢ 
Bootstrap provides default styles for text (<h1> - <h6>, <p>, etc.). 

‚Ä¢ 
Includes font size, weight, color, spacing, alignment, and responsiveness. 
  Example: Headings & Paragraphs 
<h1 class="text-primary">Heading 1</h1> 
<h2 class="text-success">Heading 2</h2> 
<h3 class="text-danger">Heading 3</h3> 
<p class="lead">This is a lead paragraph.</p> 
<p class="text-muted">Muted text (lighter color).</p> 
<p class="fw-bold">Bold text</p> 
<p class="fst-italic">Italic text</p> 
<p class="text-center">Centered text</p> 
  Typography Utilities: 
‚Ä¢ 
.lead ‚Üí Larger paragraph text. 
‚Ä¢ 
.text-primary ‚Üí Blue text. 
‚Ä¢ 
.text-muted ‚Üí Lighter gray text. 
‚Ä¢ 
.fw-bold ‚Üí Bold text. 
‚Ä¢ 
.fst-italic ‚Üí Italic text. 
‚Ä¢ 
.text-center ‚Üí Centers text. 
  On Website: 
‚Ä¢ 
Headings are automatically styled. 
‚Ä¢ 
.lead makes the paragraph stand out. 
‚Ä¢ 
.text-muted appears in a lighter shade. 
‚Ä¢ 
.fw-bold makes text bold. 
 
3Ô∏è‚É£ Images (Responsive & Styled Images) 
  What it is: 
‚Ä¢ 
Bootstrap provides built-in classes for images to be responsive, rounded, and aligned. 
  Example: Responsive & Styled Images 
<img src="https://via.placeholder.com/300" class="img-fluid" alt="Responsive Image"> 
<img src="https://via.placeholder.com/150" class="img-thumbnail" alt="Thumbnail"> 
<img src="https://via.placeholder.com/200" class="rounded-circle" alt="Rounded Image"> 
  Image Classes: 
‚Ä¢ 
.img-fluid ‚Üí Makes images responsive (auto-adjust width). 
‚Ä¢ 
.img-thumbnail ‚Üí Adds border and padding (like a photo frame). 

‚Ä¢ 
.rounded-circle ‚Üí Makes the image circular. 
  On Website: 
‚Ä¢ 
.img-fluid ‚Üí The image shrinks on smaller screens. 
‚Ä¢ 
.img-thumbnail ‚Üí Image gets a border and padding. 
‚Ä¢ 
.rounded-circle ‚Üí Image becomes a circle. 
 
4Ô∏è‚É£ Tables (Stylized Tables) 
  What it is: 
‚Ä¢ 
Bootstrap enhances <table> elements with borders, striped rows, hover effects, and responsiveness. 
  Example: Table with Bootstrap Styling 
<table class="table table-striped table-bordered 
table-hover"> 
  <thead class="table-dark"> 
    <tr> 
      <th>#</th> 
      <th>Name</th> 
      <th>Age</th> 
      <th>City</th> 
    </tr> 
  </thead> 
  <tbody> 
    <tr> 
      <td>1</td> 
      <td>Alice</td> 
      <td>22</td> 
      <td>New York</td> 
    </tr> 
    <tr> 
      <td>2</td> 
      <td>Bob</td> 
      <td>25</td> 
      <td>Chicago</td> 
    </tr> 
  </tbody> 
</table> 
  Table Classes: 
‚Ä¢ 
.table ‚Üí Base table style. 
‚Ä¢ 
.table-striped ‚Üí Alternates row colors. 
‚Ä¢ 
.table-bordered ‚Üí Adds borders to cells. 
‚Ä¢ 
.table-hover ‚Üí Highlights row on hover. 
‚Ä¢ 
.table-dark ‚Üí Dark background for the table 
header. 
  On Website: 
‚Ä¢ 
The table looks modern with borders, striped rows, and hover effects. 
 
5Ô∏è‚É£ Figures (Image Captions & Alignment) 
  What it is: 
‚Ä¢ 
Figures are used to display images with captions. 
  Example: Image with Caption 

<figure class="figure"> 
  <img src="https://via.placeholder.com/250" class="figure-img img-fluid rounded" alt="Example"> 
  <figcaption class="figure-caption text-center">This is an image caption.</figcaption> 
</figure> 
  Figure Classes: 
‚Ä¢ 
.figure ‚Üí Wraps the image & caption. 
‚Ä¢ 
.figure-img ‚Üí Styles the image. 
‚Ä¢ 
.figure-caption ‚Üí Adds caption text. 
  On Website: 
‚Ä¢ 
The image is displayed with a caption below it. 
 
  Summary Table 
Feature 
Purpose 
Reboot 
Resets default browser styles for consistency. 
Typography Provides pre-styled headings, text alignment, colors, and font utilities. 
Images 
Makes images responsive, circular, or thumbnails. 
Tables 
Enhances tables with striping, borders, hover effects, and dark themes. 
Figures 
Adds images with captions. 
  Now you know Bootstrap‚Äôs Reboot, Typography, Images, Tables, and Figures! Let me know if you 
need further explanations!   
  Bootstrap Form Controls & Components Explained 
Bootstrap provides modern, responsive form elements to enhance user experience. Below, I'll explain the 
Form Control, Select, Checks & Radios, Ranges, Input Group, Floating Labels, and Validations with 
examples and how they appear on a website. 
 
1Ô∏è‚É£ Form Control (Basic Input Styling) 
  What it is: 
‚Ä¢ 
The .form-control class styles text inputs, email fields, passwords, and textareas. 
‚Ä¢ 
Makes inputs responsive, consistent, and modern-looking. 
  Example: Basic Form Input 
<input type="text" class="form-control" placeholder="Enter your name"> 
  On Website: 
‚Ä¢ 
The input field has a smooth border, padding, and consistent width. 

‚Ä¢ 
It automatically resizes on different screen sizes. 
 
2Ô∏è‚É£ Select (Dropdown Menus) 
  What it is: 
‚Ä¢ 
.form-select styles dropdown (select) menus for a better look and feel. 
  Example: Select Dropdown 
<select class="form-select"> 
  <option selected>Choose an option</option> 
  <option value="1">Option 1</option> 
  <option value="2">Option 2</option> 
</select> 
  On Website: 
‚Ä¢ 
The dropdown looks clean, modern, and has a default arrow for selection. 
 
3Ô∏è‚É£ Checks and Radios (Checkboxes & Radio Buttons) 
  What it is: 
‚Ä¢ 
.form-check styles checkboxes and radio buttons for a clean, modern look. 
  Example: Checkboxes & Radio Buttons 
<!-- Checkbox --> 
<div class="form-check"> 
  <input class="form-check-input" type="checkbox" id="check1"> 
  <label class="form-check-label" for="check1">Check me</label> 
</div> 
<!-- Radio Buttons --> 
<div class="form-check"> 
  <input class="form-check-input" type="radio" name="radio" id="radio1"> 
  <label class="form-check-label" for="radio1">Option 1</label> 
</div> 
<div class="form-check"> 
  <input class="form-check-input" type="radio" name="radio" id="radio2"> 
  <label class="form-check-label" for="radio2">Option 2</label> 
</div> 
  On Website: 

‚Ä¢ 
Checkboxes and radios appear with consistent styling. 
‚Ä¢ 
Clicking on the label selects the checkbox/radio (improves usability). 
 
4Ô∏è‚É£ Ranges (Sliders for Values) 
  What it is: 
‚Ä¢ 
.form-range creates a slider input for selecting values. 
  Example: Range Slider 
<label for="customRange" class="form-label">Select a value:</label> 
<input type="range" class="form-range" id="customRange"> 
  On Website: 
‚Ä¢ 
The user can slide to select a value (useful for volume control, pricing sliders, etc.). 
 
5Ô∏è‚É£ Input Group (Icons & Buttons Inside Inputs) 
  What it is: 
‚Ä¢ 
.input-group allows text, buttons, or icons inside input fields. 
  Example: Input Group with Button & Text 
<div class="input-group"> 
  <span class="input-group-text">@</span> 
  <input type="text" class="form-control" placeholder="Username"> 
</div> 
<div class="input-group"> 
  <input type="text" class="form-control" placeholder="Search"> 
  <button class="btn btn-primary">Go</button> 
</div> 
  On Website: 
‚Ä¢ 
The "@" symbol appears inside the input. 
‚Ä¢ 
The "Go" button is inside the input field, improving usability. 
 
6Ô∏è‚É£ Floating Labels (Animated Labels Inside Inputs) 
  What it is: 
‚Ä¢ 
.form-floating places the label inside the input and moves it above when the user types. 
  Example: Floating Label Input 

<div class="form-floating"> 
  <input type="email" class="form-control" id="floatingEmail" placeholder="name@example.com"> 
  <label for="floatingEmail">Email address</label> 
</div> 
  On Website: 
‚Ä¢ 
The label starts inside the input field. 
‚Ä¢ 
When the user starts typing, the label moves above. 
 
7Ô∏è‚É£ Validations (Success, Error, & Feedback Messages) 
  What it is: 
‚Ä¢ 
Bootstrap provides built-in form validation styles with feedback messages. 
  Example: Form Validation with Error & Success States 
<!-- Valid Input --> 
<div class="mb-3"> 
  <input type="text" class="form-control is-valid" placeholder="Valid Input"> 
  <div class="valid-feedback">Looks good!</div> 
</div> 
<!-- Invalid Input --> 
<div class="mb-3"> 
  <input type="text" class="form-control is-invalid" placeholder="Invalid Input"> 
  <div class="invalid-feedback">Please enter a valid value.</div> 
</div> 
  On Website: 
‚Ä¢ 
Valid input appears with a   green border. 
‚Ä¢ 
Invalid input appears with a   red border and an error message. 
 
  Summary Table 
Feature 
Purpose 
Form Control 
Styles input fields to look modern and consistent. 
Select 
Styles dropdown menus beautifully. 
Checks & Radios Styles checkboxes and radio buttons. 
Ranges 
Adds sliders for selecting values. 

Feature 
Purpose 
Input Group 
Adds icons, buttons, or text inside input fields. 
Floating Labels Animates labels inside inputs for better UX. 
Validations 
Provides error/success messages with colored borders. 
  Now you understand Bootstrap Form Controls! Let me know if you need more explanations!   
Navbar using Bootstrap:: 
Here is your navbar.tsx file converted from the provided HTML code into a React TypeScript component. 
Key Changes & Enhancements: 
  Converted HTML to JSX format (e.g., class ‚Üí className). 
  Used React Bootstrap for the navbar. 
  Used React Router (Link) instead of <a> tags for navigation. 
  Removed unnecessary Bootstrap script imports (handled in index.html). 
 
navbar.tsx (React TypeScript) 
import { Link } from "react-router-dom"; 
import { Navbar, Nav, Container, Form, FormControl, Button } from "react-bootstrap"; 
const NavbarComponent: React.FC = () => { 
  return ( 
    <Navbar expand="sm" bg="dark" variant="dark"> 
      <Container fluid> 
        <Navbar.Brand href="#">Logo</Navbar.Brand> 
        <Navbar.Toggle aria-controls="mynavbar" /> 
        <Navbar.Collapse id="mynavbar"> 
          <Nav className="me-auto"> 
            <Nav.Link as={Link} to="#">Link</Nav.Link> 
            <Nav.Link as={Link} to="#">Link</Nav.Link> 
            <Nav.Link as={Link} to="#">Link</Nav.Link> 
          </Nav> 
          <Form className="d-flex"> 
            <FormControl type="text" placeholder="Search" className="me-2" /> 
            <Button variant="primary">Search</Button> 
          </Form> 

        </Navbar.Collapse> 
      </Container> 
    </Navbar> 
  ); 
}; 
export default NavbarComponent; 
 
  Explanation of Changes: 
1. JSX Syntax: 
o Replaced class with className (JSX format). 
o Used self-closing tags where necessary (<FormControl />). 
2. React Bootstrap Components: 
o Used <Navbar>, <Nav>, <Container>, and <Form> from React Bootstrap instead of raw 
HTML. 
3. Routing Support with React Router: 
o Used <Nav.Link as={Link} to="#"> instead of <a href="#"> to support React Router 
navigation. 
4. Fluid Layout Support: 
o Used <Container fluid> to ensure full-width responsiveness. 
 
  How It Looks on a Website 
‚Ä¢ 
A dark-themed navbar with a logo, three navigation links, and a search bar. 
‚Ä¢ 
On small screens, it collapses into a hamburger menu. 
‚Ä¢ 
Uses Bootstrap's responsive layout and React Router for navigation. 
 
  Next Steps 
  Install React Bootstrap if you haven't: 
npm install react-bootstrap bootstrap 
  Import Bootstrap CSS in index.tsx or App.tsx: 
import 'bootstrap/dist/css/bootstrap.min.css'; 
Now your navbar is fully functional in React with TypeScript!   Let me know if you need further 
enhancements!   
  Explanation of Bootstrap Components with Examples & How They Look in a Website 

Let's go through Accordion, Alerts, Badge, Breadcrumb, Buttons, Button Group, Card, Carousel, and 
Close Button one by one with examples. 
 
1Ô∏è‚É£ Accordion (Collapsible Content) 
  What is it? 
An accordion is a collapsible component that hides and reveals content when clicked. 
  Example: 
<div class="accordion" id="myAccordion"> 
  <div class="accordion-item"> 
    <h2 class="accordion-header"> 
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne"> 
        Section 1 
      </button> 
    </h2> 
    <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#myAccordion"> 
      <div class="accordion-body"> 
        Content for section 1. 
      </div> 
    </div> 
  </div> 
  <div class="accordion-item"> 
    <h2 class="accordion-header"> 
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-
target="#collapseTwo"> 
        Section 2 
      </button> 
    </h2> 
    <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#myAccordion"> 
      <div class="accordion-body"> 
        Content for section 2. 
      </div> 
    </div> 
  </div> 
</div> 

  How It Looks? 
‚Ä¢ 
A clickable section that expands/collapses to show/hide content. 
‚Ä¢ 
Used for FAQs, categories, or sections in UI. 
 
2Ô∏è‚É£ Alerts (Notifications) 
  What is it? 
Alerts are dismissible messages used for warnings, success messages, errors, etc. 
  Example: 
<div class="alert alert-success" role="alert"> 
    Success! Your action was completed successfully. 
</div> 
<div class="alert alert-danger" role="alert"> 
    Error! Something went wrong. 
</div> 
  How It Looks? 
‚Ä¢ 
Colored message boxes (Green = Success, Red = Error, Yellow = Warning, Blue = Info). 
‚Ä¢ 
Can be dismissed with a close button. 
 
3Ô∏è‚É£ Badge (Labels & Counters) 
  What is it? 
A badge is a small UI element used for notifications, counters, or labels. 
  Example: 
<h1>Messages <span class="badge bg-danger">5</span></h1> 
<button class="btn btn-primary"> 
  Notifications <span class="badge bg-warning">3</span> 
</button> 
  How It Looks? 
‚Ä¢ 
Small labels next to text or buttons to highlight counts or statuses. 
 
4Ô∏è‚É£ Breadcrumb (Navigation Path) 
  What is it? 
Breadcrumbs show the hierarchical navigation path on a website. 

  Example: 
<nav aria-label="breadcrumb"> 
  <ol class="breadcrumb"> 
    <li class="breadcrumb-item"><a href="#">Home</a></li> 
    <li class="breadcrumb-item"><a href="#">Library</a></li> 
    <li class="breadcrumb-item active" aria-current="page">Data</li> 
  </ol> 
</nav> 
  How It Looks? 
‚Ä¢ 
Displays "Home > Library > Data" style navigation. 
 
5Ô∏è‚É£ Buttons 
  What is it? 
Bootstrap buttons have different styles, colors, and sizes. 
  Example: 
<button class="btn btn-primary">Primary</button> 
<button class="btn btn-secondary">Secondary</button> 
<button class="btn btn-success">Success</button> 
<button class="btn btn-danger">Danger</button> 
  How It Looks? 
‚Ä¢ 
Styled buttons with colors & hover effects. 
 
6Ô∏è‚É£ Button Group 
  What is it? 
A group of buttons styled together. 
  Example: 
<div class="btn-group"> 
  <button class="btn btn-primary">Left</button> 
  <button class="btn btn-primary">Middle</button> 
  <button class="btn btn-primary">Right</button> 
</div> 
  How It Looks? 
‚Ä¢ 
A group of buttons placed together. 

 
7Ô∏è‚É£ Card (Content Boxes) 
  What is it? 
A card is a structured box for displaying content like images, titles, text, and buttons. 
  Example: 
<div class="card" style="width: 18rem;"> 
  <img src="https://via.placeholder.com/150" class="card-img-top" alt="Image"> 
  <div class="card-body"> 
    <h5 class="card-title">Card Title</h5> 
    <p class="card-text">Some quick content inside the card.</p> 
    <a href="#" class="btn btn-primary">Go somewhere</a> 
  </div> 
</div> 
  How It Looks? 
‚Ä¢ 
A box with an image, title, text, and button. 
‚Ä¢ 
Used for profile cards, product previews, etc.. 
 
8Ô∏è‚É£ Carousel (Image Slider) 
  What is it? 
A slideshow that rotates images. 
  Example: 
<div id="carouselExample" class="carousel slide" data-bs-ride="carousel"> 
  <div class="carousel-inner"> 
    <div class="carousel-item active"> 
      <img src="https://via.placeholder.com/800x400" class="d-block w-100" alt="First Slide"> 
    </div> 
    <div class="carousel-item"> 
      <img src="https://via.placeholder.com/800x400" class="d-block w-100" alt="Second Slide"> 
    </div> 
    <div class="carousel-item"> 
      <img src="https://via.placeholder.com/800x400" class="d-block w-100" alt="Third Slide"> 
    </div> 
  </div> 

  <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-
slide="prev"> 
    <span class="carousel-control-prev-icon" aria-hidden="true"></span> 
  </button> 
  <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-
slide="next"> 
    <span class="carousel-control-next-icon" aria-hidden="true"></span> 
  </button> 
</div> 
  How It Looks? 
‚Ä¢ 
Sliding images with navigation buttons. 
 
9‚É£ Close Button 
  What is it? 
A close button for alerts, modals, or UI dismissals. 
  Example: 
<div class="alert alert-warning alert-dismissible fade show"> 
  <strong>Warning!</strong> Check this alert. 
  <button type="button" class="btn-close" data-bs-dismiss="alert"></button> 
</div> 
  How It Looks? 
‚Ä¢ 
A small "X" button inside alerts. 
 
  Summary Table 
Component 
Use Case 
Accordion 
Expand/collapse content (FAQs, sections) 
Alerts 
Show success, error, or warning messages 
Badge 
Display small counters/labels 
Breadcrumb Show website navigation path 
Buttons 
Styled buttons for actions 
Button Group Group multiple buttons together 
Card 
Display structured content boxes 

Component 
Use Case 
Carousel 
Create image sliders 
Close Button Dismiss alerts, modals, UI elements 
 
  Conclusion 
These Bootstrap components improve UI/UX by making content structured, navigable, and interactive!   Let 
me know if you need more details!   
  Explanation of Bootstrap Components & Utilities with Examples 
Let's go through Dropdowns, List Group, Modal, Progress, Clearfix, Colored Links, Position, Ratio, 
Stretched Link, Text Truncation, and Visually Hidden with examples and how they look on a website. 
 
1Ô∏è‚É£ Dropdowns (Toggle Menu) 
  What is it? 
A dropdown is a toggleable menu that appears when clicking a button. 
  Example: 
<div class="dropdown"> 
  <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown"> 
    Dropdown Button 
  </button> 
  <ul class="dropdown-menu"> 
    <li><a class="dropdown-item" href="#">Option 1</a></li> 
    <li><a class="dropdown-item" href="#">Option 2</a></li> 
    <li><a class="dropdown-item" href="#">Option 3</a></li> 
  </ul> 
</div> 
  How It Looks? 
‚Ä¢ 
Clicking the button reveals a dropdown list. 
 
2Ô∏è‚É£ List Group (Styled Lists) 
  What is it? 
A list group is used to display a group of items (links, text, buttons). 
  Example: 
<ul class="list-group"> 

  <li class="list-group-item">Item 1</li> 
  <li class="list-group-item">Item 2</li> 
  <li class="list-group-item">Item 3</li> 
</ul> 
  How It Looks? 
‚Ä¢ 
A stacked list with borders. 
‚Ä¢ 
Used for menus, categories, notifications. 
 
3Ô∏è‚É£ Modal (Popup Window) 
  What is it? 
A modal is a pop-up dialog used for alerts, confirmations, or forms. 
  Example: 
<!-- Button to trigger modal --> 
<button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#myModal"> 
  Open Modal 
</button> 
<!-- Modal --> 
<div class="modal fade" id="myModal"> 
  <div class="modal-dialog"> 
    <div class="modal-content"> 
      <div class="modal-header"> 
        <h5 class="modal-title">Modal Title</h5> 
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button> 
      </div> 
      <div class="modal-body"> 
        This is a modal window! 
      </div> 
      <div class="modal-footer"> 
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> 
      </div> 
    </div> 
  </div> 
</div> 

  How It Looks? 
‚Ä¢ 
Clicking the button opens a popup modal. 
 
4Ô∏è‚É£ Progress Bar 
  What is it? 
A progress bar indicates the loading or completion percentage. 
  Example: 
<div class="progress"> 
  <div class="progress-bar" style="width: 50%;">50%</div> 
</div> 
  How It Looks? 
‚Ä¢ 
A loading bar filling up to 5Ô∏è0%. 
 
5Ô∏è‚É£ Clearfix (Fix Floating Issues) 
  What is it? 
clearfix is used when floating elements overlap their parent container. 
  Example: 
<div class="clearfix"> 
  <div class="float-start bg-primary text-white p-2">Left</div> 
  <div class="float-end bg-secondary text-white p-2">Right</div> 
</div> 
  How It Looks? 
‚Ä¢ 
Ensures correct layout when using float. 
 
6Ô∏è‚É£ Colored Links 
  What is it? 
Bootstrap provides pre-styled colored links. 
  Example: 
<a href="#" class="text-danger">Red Link</a> 
<a href="#" class="text-success">Green Link</a> 
  How It Looks? 
‚Ä¢ 
Colored hyperlinks for better UI. 

 
7Ô∏è‚É£ Position (Control Element Position) 
  What is it? 
Bootstrap provides position utilities (fixed, absolute, relative, etc.). 
  Example: 
<div class="position-fixed bottom-0 end-0 p-3 bg-warning"> 
  Fixed Box (Bottom-Right) 
</div> 
  How It Looks? 
‚Ä¢ 
A fixed element stuck to the bottom-right. 
 
8Ô∏è‚É£ Ratio (Maintain Aspect Ratio) 
  What is it? 
Bootstrap's ratio utility ensures responsive aspect ratios for elements. 
  Example: 
<div class="ratio ratio-16x9"> 
  <iframe src="https://www.youtube.com/embed/dQw4w9WgXcQ" allowfullscreen></iframe> 
</div> 
  How It Looks? 
‚Ä¢ 
Maintains 1Ô∏è6Ô∏è:9 ratio for videos. 
 
9‚É£ Stretched Link 
  What is it? 
stretched-link makes the whole area clickable, not just the text. 
  Example: 
<div class="card"> 
  <div class="card-body"> 
    <h5 class="card-title">Title</h5> 
    <p class="card-text">Click anywhere!</p> 
    <a href="#" class="stretched-link">Go Somewhere</a> 
  </div> 
</div> 

  How It Looks? 
‚Ä¢ 
Clicking anywhere inside the card opens the link. 
 
  Text Truncation (Cut Long Text) 
  What is it? 
Automatically truncates long text with ellipsis (...). 
  Example: 
<p class="text-truncate" style="width: 200px;"> 
  This is a very long text that gets truncated when it's too long. 
</p> 
  How It Looks? 
‚Ä¢ 
Cuts off overflowing text with .... 
 
1Ô∏è‚É£1Ô∏è‚É£ Visually Hidden (Hide for Accessibility) 
  What is it? 
Hides elements visually but keeps them readable for screen readers. 
  Example: 
<span class="visually-hidden">Screen reader-only text</span> 
  How It Looks? 
‚Ä¢ 
Invisible but accessible for screen readers. 
 
  Summary Table 
Component 
Use Case 
Dropdowns 
Toggle menus for navigation 
List Group 
Display styled lists (menus, notifications) 
Modal 
Popup for alerts, forms, confirmations 
Progress Bar 
Show loading/completion progress 
Clearfix 
Fix floating layout issues 
Colored Links Style hyperlinks with colors 
Position 
Set fixed, relative, absolute positions 
Ratio 
Maintain aspect ratio for elements 

Component 
Use Case 
Stretched Link Make entire area clickable 
Text Truncation Cut long text with ellipsis (...) 
Visually Hidden Hide content for screen readers only 
 
  Conclusion 
These Bootstrap components and utilities help structure content, improve layout, and enhance UI/UX!   
Let me know if you need more details!